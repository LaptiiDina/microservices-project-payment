services:
  zookeeper:
    image: bitnami/zookeeper:3.8.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - zookeeper-data:/bitnami
    deploy:
      resources:
        limits:
          memory: 1g

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
    volumes:
      - ./kafka-init.sh:/opt/kafka-init.sh
      - ./wait-for-zookeeper.sh:/wait-for-zookeeper.sh
    depends_on:
      zookeeper:
        condition: service_healthy
    command: >
      sh -c "
      /opt/bitnami/scripts/kafka/run.sh &
      sleep 10 &&
      bash /opt/kafka-init.sh &&
      wait
      "

  order-db:
    image: postgres:15
    container_name: order-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: order-db
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - order-db-data:/var/lib/postgresql/data

  user-db:
    image: postgres:15
    container_name: user-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-db
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - user-db-data:/var/lib/postgresql/data

  order-service:
    build:
      context: ./apps/order-service
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    volumes:
      - ./apps/order-service:/app
      - /app/node_modules
    depends_on:
      - order-db
      - kafka
    environment:
      DATABASE_URL: postgres://postgres:password@order-db:5432/order-db
      KAFKA_BROKER: kafka:9092
    command: >
      sh -c "
      sleep 20 &&
      npx prisma db push --force-reset &&
      npx prisma generate &&
      npm run start:dev
      "

  user-service:
    build:
      context: ./apps/user-service
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    volumes:
      - ./apps/user-service:/app
      - /app/node_modules
    depends_on:
      - user-db
      - kafka
    environment:
      DATABASE_URL: postgres://postgres:password@user-db:5432/user-db
      KAFKA_BROKER: kafka:9092
    command: >
      sh -c "
      sleep 20 &&
      npx prisma db push --force-reset &&
      npx prisma generate &&
      npm run start:dev
      "

volumes:
  zookeeper-data:
  kafka-data:
  order-db-data:
  user-db-data:
networks:
  kafka_network:
    name: kafka_network
